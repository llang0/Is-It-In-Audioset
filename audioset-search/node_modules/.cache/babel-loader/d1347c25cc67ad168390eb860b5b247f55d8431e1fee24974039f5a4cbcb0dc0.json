{"ast":null,"code":"import $jvaNJ$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useId as $jvaNJ$useId, isIPhone as $jvaNJ$isIPhone, isAndroid as $jvaNJ$isAndroid, filterDOMProps as $jvaNJ$filterDOMProps, chain as $jvaNJ$chain, useFormReset as $jvaNJ$useFormReset, mergeProps as $jvaNJ$mergeProps, isIOS as $jvaNJ$isIOS } from \"@react-aria/utils\";\nimport { useMemo as $jvaNJ$useMemo, useState as $jvaNJ$useState, useCallback as $jvaNJ$useCallback } from \"react\";\nimport { privateValidationStateProp as $jvaNJ$privateValidationStateProp } from \"@react-stately/form\";\nimport { useFocus as $jvaNJ$useFocus, useFocusWithin as $jvaNJ$useFocusWithin, useScrollWheel as $jvaNJ$useScrollWheel } from \"@react-aria/interactions\";\nimport { useFormattedTextField as $jvaNJ$useFormattedTextField } from \"@react-aria/textfield\";\nimport { useLocalizedStringFormatter as $jvaNJ$useLocalizedStringFormatter, useNumberFormatter as $jvaNJ$useNumberFormatter } from \"@react-aria/i18n\";\nimport { useSpinButton as $jvaNJ$useSpinButton } from \"@react-aria/spinbutton\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $81397a9303501bda$export$23f548e970bdf099(props, state, inputRef) {\n  let {\n    id: id,\n    decrementAriaLabel: decrementAriaLabel,\n    incrementAriaLabel: incrementAriaLabel,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    minValue: minValue,\n    maxValue: maxValue,\n    autoFocus: autoFocus,\n    label: label,\n    formatOptions: formatOptions,\n    onBlur = () => {},\n    onFocus: onFocus,\n    onFocusChange: onFocusChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    description: description,\n    errorMessage: errorMessage,\n    isWheelDisabled: isWheelDisabled,\n    ...otherProps\n  } = props;\n  let {\n    increment: increment,\n    incrementToMax: incrementToMax,\n    decrement: decrement,\n    decrementToMin: decrementToMin,\n    numberValue: numberValue,\n    inputValue: inputValue,\n    commit: commit,\n    commitValidation: commitValidation\n  } = state;\n  const stringFormatter = (0, $jvaNJ$useLocalizedStringFormatter)((0, $parcel$interopDefault($jvaNJ$intlStringsmodulejs)), '@react-aria/numberfield');\n  let inputId = (0, $jvaNJ$useId)(id);\n  let {\n    focusProps: focusProps\n  } = (0, $jvaNJ$useFocus)({\n    onBlur() {\n      // Set input value to normalized valid value\n      commit();\n    }\n  });\n  let numberFormatter = (0, $jvaNJ$useNumberFormatter)(formatOptions);\n  let intlOptions = (0, $jvaNJ$useMemo)(() => numberFormatter.resolvedOptions(), [numberFormatter]);\n  // Replace negative textValue formatted using currencySign: 'accounting'\n  // with a textValue that can be announced using a minus sign.\n  let textValueFormatter = (0, $jvaNJ$useNumberFormatter)({\n    ...formatOptions,\n    currencySign: undefined\n  });\n  let textValue = (0, $jvaNJ$useMemo)(() => isNaN(numberValue) ? '' : textValueFormatter.format(numberValue), [textValueFormatter, numberValue]);\n  let {\n    spinButtonProps: spinButtonProps,\n    incrementButtonProps: incButtonProps,\n    decrementButtonProps: decButtonProps\n  } = (0, $jvaNJ$useSpinButton)({\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    maxValue: maxValue,\n    minValue: minValue,\n    onIncrement: increment,\n    onIncrementToMax: incrementToMax,\n    onDecrement: decrement,\n    onDecrementToMin: decrementToMin,\n    value: numberValue,\n    textValue: textValue\n  });\n  let [focusWithin, setFocusWithin] = (0, $jvaNJ$useState)(false);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $jvaNJ$useFocusWithin)({\n    isDisabled: isDisabled,\n    onFocusWithinChange: setFocusWithin\n  });\n  let onWheel = (0, $jvaNJ$useCallback)(e => {\n    // if on a trackpad, users can scroll in both X and Y at once, check the magnitude of the change\n    // if it's mostly in the X direction, then just return, the user probably doesn't mean to inc/dec\n    // this isn't perfect, events come in fast with small deltas and a part of the scroll may give a false indication\n    // especially if the user is scrolling near 45deg\n    if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;\n    if (e.deltaY > 0) increment();else if (e.deltaY < 0) decrement();\n  }, [decrement, increment]);\n  // If the input isn't supposed to receive input, disable scrolling.\n  let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;\n  (0, $jvaNJ$useScrollWheel)({\n    onScroll: onWheel,\n    isDisabled: scrollingDisabled\n  }, inputRef);\n  // The inputMode attribute influences the software keyboard that is shown on touch devices.\n  // Browsers and operating systems are quite inconsistent about what keys are available, however.\n  // We choose between numeric and decimal based on whether we allow negative and fractional numbers,\n  // and based on testing on various devices to determine what keys are available in each inputMode.\n  let hasDecimals = intlOptions.maximumFractionDigits > 0;\n  let hasNegative = state.minValue === undefined || isNaN(state.minValue) || state.minValue < 0;\n  let inputMode = 'numeric';\n  if ((0, $jvaNJ$isIPhone)()) {\n    // iPhone doesn't have a minus sign in either numeric or decimal.\n    // Note this is only for iPhone, not iPad, which always has both\n    // minus and decimal in numeric.\n    if (hasNegative) inputMode = 'text';else if (hasDecimals) inputMode = 'decimal';\n  } else if ((0, $jvaNJ$isAndroid)()) {\n    // Android numeric has both a decimal point and minus key.\n    // decimal does not have a minus key.\n    if (hasNegative) inputMode = 'numeric';else if (hasDecimals) inputMode = 'decimal';\n  }\n  let onChange = value => {\n    if (state.validate(value)) state.setInputValue(value);\n  };\n  let domProps = (0, $jvaNJ$filterDOMProps)(props);\n  let onKeyDownEnter = (0, $jvaNJ$useCallback)(e => {\n    if (e.key === 'Enter') {\n      commit();\n      commitValidation();\n    } else e.continuePropagation();\n  }, [commit, commitValidation]);\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    inputProps: textFieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $jvaNJ$useFormattedTextField)({\n    ...otherProps,\n    ...domProps,\n    name: undefined,\n    label: label,\n    autoFocus: autoFocus,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    validate: undefined,\n    [(0, $jvaNJ$privateValidationStateProp)]: state,\n    value: inputValue,\n    defaultValue: undefined,\n    autoComplete: 'off',\n    'aria-label': props['aria-label'] || undefined,\n    'aria-labelledby': props['aria-labelledby'] || undefined,\n    id: inputId,\n    type: 'text',\n    inputMode: inputMode,\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onFocusChange: onFocusChange,\n    onKeyDown: (0, $jvaNJ$useMemo)(() => (0, $jvaNJ$chain)(onKeyDownEnter, onKeyDown), [onKeyDownEnter, onKeyDown]),\n    onKeyUp: onKeyUp,\n    description: description,\n    errorMessage: errorMessage\n  }, state, inputRef);\n  (0, $jvaNJ$useFormReset)(inputRef, state.numberValue, state.setNumberValue);\n  let inputProps = (0, $jvaNJ$mergeProps)(spinButtonProps, focusProps, textFieldProps, {\n    // override the spinbutton role, we can't focus a spin button with VO\n    role: null,\n    // ignore aria-roledescription on iOS so that required state will announce when it is present\n    'aria-roledescription': !(0, $jvaNJ$isIOS)() ? stringFormatter.format('numberField') : null,\n    'aria-valuemax': null,\n    'aria-valuemin': null,\n    'aria-valuenow': null,\n    'aria-valuetext': null,\n    autoCorrect: 'off',\n    spellCheck: 'false'\n  });\n  if (props.validationBehavior === 'native') inputProps['aria-required'] = undefined;\n  let onButtonPressStart = e => {\n    var _inputRef_current;\n    // If focus is already on the input, keep it there so we don't hide the\n    // software keyboard when tapping the increment/decrement buttons.\n    if (document.activeElement === inputRef.current) return;\n    // Otherwise, when using a mouse, move focus to the input.\n    // On touch, or with a screen reader, focus the button so that the software\n    // keyboard does not appear and the screen reader cursor is not moved off the button.\n    if (e.pointerType === 'mouse') (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();else e.target.focus();\n  };\n  // Determine the label for the increment and decrement buttons. There are 4 cases:\n  //\n  // 1. With a visible label that is a string: aria-label: `Increase ${props.label}`\n  // 2. With a visible label that is JSX: aria-label: 'Increase', aria-labelledby: '${incrementId} ${labelId}'\n  // 3. With an aria-label: aria-label: `Increase ${props['aria-label']}`\n  // 4. With an aria-labelledby: aria-label: 'Increase', aria-labelledby: `${incrementId} ${props['aria-labelledby']}`\n  //\n  // (1) and (2) could possibly be combined and both use aria-labelledby. However, placing the label in\n  // the aria-label string rather than using aria-labelledby gives more flexibility to translators to change\n  // the order or add additional words around the label if needed.\n  let fieldLabel = props['aria-label'] || (typeof props.label === 'string' ? props.label : '');\n  let ariaLabelledby;\n  if (!fieldLabel) ariaLabelledby = props.label != null ? labelProps.id : props['aria-labelledby'];\n  let incrementId = (0, $jvaNJ$useId)();\n  let decrementId = (0, $jvaNJ$useId)();\n  let incrementButtonProps = (0, $jvaNJ$mergeProps)(incButtonProps, {\n    'aria-label': incrementAriaLabel || stringFormatter.format('increase', {\n      fieldLabel: fieldLabel\n    }).trim(),\n    id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,\n    'aria-labelledby': ariaLabelledby && !incrementAriaLabel ? `${incrementId} ${ariaLabelledby}` : null,\n    'aria-controls': inputId,\n    excludeFromTabOrder: true,\n    preventFocusOnPress: true,\n    allowFocusWhenDisabled: true,\n    isDisabled: !state.canIncrement,\n    onPressStart: onButtonPressStart\n  });\n  let decrementButtonProps = (0, $jvaNJ$mergeProps)(decButtonProps, {\n    'aria-label': decrementAriaLabel || stringFormatter.format('decrease', {\n      fieldLabel: fieldLabel\n    }).trim(),\n    id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,\n    'aria-labelledby': ariaLabelledby && !decrementAriaLabel ? `${decrementId} ${ariaLabelledby}` : null,\n    'aria-controls': inputId,\n    excludeFromTabOrder: true,\n    preventFocusOnPress: true,\n    allowFocusWhenDisabled: true,\n    isDisabled: !state.canDecrement,\n    onPressStart: onButtonPressStart\n  });\n  return {\n    groupProps: {\n      ...focusWithinProps,\n      role: 'group',\n      'aria-disabled': isDisabled,\n      'aria-invalid': isInvalid ? 'true' : undefined\n    },\n    labelProps: labelProps,\n    inputProps: inputProps,\n    incrementButtonProps: incrementButtonProps,\n    decrementButtonProps: decrementButtonProps,\n    errorMessageProps: errorMessageProps,\n    descriptionProps: descriptionProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $81397a9303501bda$export$23f548e970bdf099 as useNumberField };","map":{"version":3,"names":["$81397a9303501bda$export$23f548e970bdf099","props","state","inputRef","id","decrementAriaLabel","incrementAriaLabel","isDisabled","isReadOnly","isRequired","minValue","maxValue","autoFocus","label","formatOptions","onBlur","onFocus","onFocusChange","onKeyDown","onKeyUp","description","errorMessage","isWheelDisabled","otherProps","increment","incrementToMax","decrement","decrementToMin","numberValue","inputValue","commit","commitValidation","stringFormatter","$jvaNJ$useLocalizedStringFormatter","$parcel$interopDefault","$jvaNJ$intlStringsmodulejs","inputId","$jvaNJ$useId","focusProps","$jvaNJ$useFocus","numberFormatter","$jvaNJ$useNumberFormatter","intlOptions","$jvaNJ$useMemo","resolvedOptions","textValueFormatter","currencySign","undefined","textValue","isNaN","format","spinButtonProps","incrementButtonProps","incButtonProps","decrementButtonProps","decButtonProps","$jvaNJ$useSpinButton","onIncrement","onIncrementToMax","onDecrement","onDecrementToMin","value","focusWithin","setFocusWithin","$jvaNJ$useState","focusWithinProps","$jvaNJ$useFocusWithin","onFocusWithinChange","onWheel","$jvaNJ$useCallback","e","Math","abs","deltaY","deltaX","scrollingDisabled","$jvaNJ$useScrollWheel","onScroll","hasDecimals","maximumFractionDigits","hasNegative","inputMode","$jvaNJ$isIPhone","$jvaNJ$isAndroid","onChange","validate","setInputValue","domProps","$jvaNJ$filterDOMProps","onKeyDownEnter","key","continuePropagation","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","inputProps","textFieldProps","descriptionProps","errorMessageProps","$jvaNJ$useFormattedTextField","name","$jvaNJ$privateValidationStateProp","defaultValue","autoComplete","type","$jvaNJ$chain","$jvaNJ$useFormReset","setNumberValue","$jvaNJ$mergeProps","role","$jvaNJ$isIOS","autoCorrect","spellCheck","validationBehavior","onButtonPressStart","_inputRef_current","document","activeElement","current","pointerType","focus","target","fieldLabel","ariaLabelledby","incrementId","decrementId","trim","excludeFromTabOrder","preventFocusOnPress","allowFocusWhenDisabled","canIncrement","onPressStart","canDecrement","groupProps"],"sources":["/Users/gentlewomensclub/Documents/Leslie/Trained/audioset-search/node_modules/@react-aria/numberfield/dist/packages/@react-aria/numberfield/src/useNumberField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaNumberFieldProps} from '@react-types/numberfield';\nimport {chain, filterDOMProps, isAndroid, isIOS, isIPhone, mergeProps, useFormReset, useId} from '@react-aria/utils';\nimport {DOMAttributes, GroupDOMAttributes, TextInputDOMProps, ValidationResult} from '@react-types/shared';\nimport {\n  InputHTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useMemo,\n  useState\n} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {NumberFieldState} from '@react-stately/numberfield';\nimport {privateValidationStateProp} from '@react-stately/form';\nimport {useFocus, useFocusWithin, useScrollWheel} from '@react-aria/interactions';\nimport {useFormattedTextField} from '@react-aria/textfield';\nimport {\n  useLocalizedStringFormatter,\n  useNumberFormatter\n} from '@react-aria/i18n';\nimport {useSpinButton} from '@react-aria/spinbutton';\n\nexport interface NumberFieldAria extends ValidationResult {\n  /** Props for the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the group wrapper around the input and stepper buttons. */\n  groupProps: GroupDOMAttributes,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the increment button, to be passed to [useButton](useButton.html). */\n  incrementButtonProps: AriaButtonProps,\n  /** Props for the decrement button, to be passed to [useButton](useButton.html). */\n  decrementButtonProps: AriaButtonProps,\n  /** Props for the number field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the number field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a number field component.\n * Number fields allow users to enter a number, and increment or decrement the value using stepper buttons.\n */\nexport function useNumberField(props: AriaNumberFieldProps, state: NumberFieldState, inputRef: RefObject<HTMLInputElement>): NumberFieldAria {\n  let {\n    id,\n    decrementAriaLabel,\n    incrementAriaLabel,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    minValue,\n    maxValue,\n    autoFocus,\n    label,\n    formatOptions,\n    onBlur = () => {},\n    onFocus,\n    onFocusChange,\n    onKeyDown,\n    onKeyUp,\n    description,\n    errorMessage,\n    isWheelDisabled,\n    ...otherProps\n  } = props;\n\n  let {\n    increment,\n    incrementToMax,\n    decrement,\n    decrementToMin,\n    numberValue,\n    inputValue,\n    commit,\n    commitValidation\n  } = state;\n\n  const stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/numberfield');\n\n  let inputId = useId(id);\n  let {focusProps} = useFocus({\n    onBlur() {\n      // Set input value to normalized valid value\n      commit();\n    }\n  });\n\n  let numberFormatter = useNumberFormatter(formatOptions);\n  let intlOptions = useMemo(() => numberFormatter.resolvedOptions(), [numberFormatter]);\n\n  // Replace negative textValue formatted using currencySign: 'accounting'\n  // with a textValue that can be announced using a minus sign.\n  let textValueFormatter = useNumberFormatter({...formatOptions, currencySign: undefined});\n  let textValue = useMemo(() => isNaN(numberValue) ? '' : textValueFormatter.format(numberValue), [textValueFormatter, numberValue]);\n\n  let {\n    spinButtonProps,\n    incrementButtonProps: incButtonProps,\n    decrementButtonProps: decButtonProps\n  } = useSpinButton(\n    {\n      isDisabled,\n      isReadOnly,\n      isRequired,\n      maxValue,\n      minValue,\n      onIncrement: increment,\n      onIncrementToMax: incrementToMax,\n      onDecrement: decrement,\n      onDecrementToMin: decrementToMin,\n      value: numberValue,\n      textValue\n    }\n  );\n\n  let [focusWithin, setFocusWithin] = useState(false);\n  let {focusWithinProps} = useFocusWithin({isDisabled, onFocusWithinChange: setFocusWithin});\n\n  let onWheel = useCallback((e) => {\n    // if on a trackpad, users can scroll in both X and Y at once, check the magnitude of the change\n    // if it's mostly in the X direction, then just return, the user probably doesn't mean to inc/dec\n    // this isn't perfect, events come in fast with small deltas and a part of the scroll may give a false indication\n    // especially if the user is scrolling near 45deg\n    if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) {\n      return;\n    }\n    if (e.deltaY > 0) {\n      increment();\n    } else if (e.deltaY < 0) {\n      decrement();\n    }\n  }, [decrement, increment]);\n  // If the input isn't supposed to receive input, disable scrolling.\n  let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;\n  useScrollWheel({onScroll: onWheel, isDisabled: scrollingDisabled}, inputRef);\n\n  // The inputMode attribute influences the software keyboard that is shown on touch devices.\n  // Browsers and operating systems are quite inconsistent about what keys are available, however.\n  // We choose between numeric and decimal based on whether we allow negative and fractional numbers,\n  // and based on testing on various devices to determine what keys are available in each inputMode.\n  let hasDecimals = intlOptions.maximumFractionDigits > 0;\n  let hasNegative = (state.minValue === undefined || isNaN(state.minValue)) || state.minValue < 0;\n  let inputMode: TextInputDOMProps['inputMode'] = 'numeric';\n  if (isIPhone()) {\n    // iPhone doesn't have a minus sign in either numeric or decimal.\n    // Note this is only for iPhone, not iPad, which always has both\n    // minus and decimal in numeric.\n    if (hasNegative) {\n      inputMode = 'text';\n    } else if (hasDecimals) {\n      inputMode = 'decimal';\n    }\n  } else if (isAndroid()) {\n    // Android numeric has both a decimal point and minus key.\n    // decimal does not have a minus key.\n    if (hasNegative) {\n      inputMode = 'numeric';\n    } else if (hasDecimals) {\n      inputMode = 'decimal';\n    }\n  }\n\n  let onChange = value => {\n    if (state.validate(value)) {\n      state.setInputValue(value);\n    }\n  };\n\n  let domProps = filterDOMProps(props);\n  let onKeyDownEnter = useCallback((e) => {\n    if (e.key === 'Enter') {\n      commit();\n      commitValidation();\n    } else {\n      e.continuePropagation();\n    }\n  }, [commit, commitValidation]);\n\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps} = useFormattedTextField({\n    ...otherProps,\n    ...domProps,\n    name: undefined,\n    label,\n    autoFocus,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    validate: undefined,\n    [privateValidationStateProp]: state,\n    value: inputValue,\n    defaultValue: undefined, // defaultValue already used to populate state.inputValue, unneeded here\n    autoComplete: 'off',\n    'aria-label': props['aria-label'] || undefined,\n    'aria-labelledby': props['aria-labelledby'] || undefined,\n    id: inputId,\n    type: 'text', // Can't use type=\"number\" because then we can't have things like $ in the field.\n    inputMode,\n    onChange,\n    onBlur,\n    onFocus,\n    onFocusChange,\n    onKeyDown: useMemo(() => chain(onKeyDownEnter, onKeyDown), [onKeyDownEnter, onKeyDown]),\n    onKeyUp,\n    description,\n    errorMessage\n  }, state, inputRef);\n\n  useFormReset(inputRef, state.numberValue, state.setNumberValue);\n\n  let inputProps: InputHTMLAttributes<HTMLInputElement> = mergeProps(\n    spinButtonProps,\n    focusProps,\n    textFieldProps,\n    {\n      // override the spinbutton role, we can't focus a spin button with VO\n      role: null,\n      // ignore aria-roledescription on iOS so that required state will announce when it is present\n      'aria-roledescription': (!isIOS() ? stringFormatter.format('numberField') : null),\n      'aria-valuemax': null,\n      'aria-valuemin': null,\n      'aria-valuenow': null,\n      'aria-valuetext': null,\n      autoCorrect: 'off',\n      spellCheck: 'false'\n    }\n  );\n\n  if (props.validationBehavior === 'native') {\n    inputProps['aria-required'] = undefined;\n  }\n\n  let onButtonPressStart = (e) => {\n    // If focus is already on the input, keep it there so we don't hide the\n    // software keyboard when tapping the increment/decrement buttons.\n    if (document.activeElement === inputRef.current) {\n      return;\n    }\n\n    // Otherwise, when using a mouse, move focus to the input.\n    // On touch, or with a screen reader, focus the button so that the software\n    // keyboard does not appear and the screen reader cursor is not moved off the button.\n    if (e.pointerType === 'mouse') {\n      inputRef.current?.focus();\n    } else {\n      e.target.focus();\n    }\n  };\n\n  // Determine the label for the increment and decrement buttons. There are 4 cases:\n  //\n  // 1. With a visible label that is a string: aria-label: `Increase ${props.label}`\n  // 2. With a visible label that is JSX: aria-label: 'Increase', aria-labelledby: '${incrementId} ${labelId}'\n  // 3. With an aria-label: aria-label: `Increase ${props['aria-label']}`\n  // 4. With an aria-labelledby: aria-label: 'Increase', aria-labelledby: `${incrementId} ${props['aria-labelledby']}`\n  //\n  // (1) and (2) could possibly be combined and both use aria-labelledby. However, placing the label in\n  // the aria-label string rather than using aria-labelledby gives more flexibility to translators to change\n  // the order or add additional words around the label if needed.\n  let fieldLabel = props['aria-label'] || (typeof props.label === 'string' ? props.label : '');\n  let ariaLabelledby: string | undefined;\n  if (!fieldLabel) {\n    ariaLabelledby = props.label != null ? labelProps.id : props['aria-labelledby'];\n  }\n\n  let incrementId = useId();\n  let decrementId = useId();\n\n  let incrementButtonProps: AriaButtonProps = mergeProps(incButtonProps, {\n    'aria-label': incrementAriaLabel || stringFormatter.format('increase', {fieldLabel}).trim(),\n    id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,\n    'aria-labelledby': ariaLabelledby && !incrementAriaLabel ? `${incrementId} ${ariaLabelledby}` : null,\n    'aria-controls': inputId,\n    excludeFromTabOrder: true,\n    preventFocusOnPress: true,\n    allowFocusWhenDisabled: true,\n    isDisabled: !state.canIncrement,\n    onPressStart: onButtonPressStart\n  });\n\n  let decrementButtonProps: AriaButtonProps = mergeProps(decButtonProps, {\n    'aria-label': decrementAriaLabel || stringFormatter.format('decrease', {fieldLabel}).trim(),\n    id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,\n    'aria-labelledby': ariaLabelledby && !decrementAriaLabel ? `${decrementId} ${ariaLabelledby}` : null,\n    'aria-controls': inputId,\n    excludeFromTabOrder: true,\n    preventFocusOnPress: true,\n    allowFocusWhenDisabled: true,\n    isDisabled: !state.canDecrement,\n    onPressStart: onButtonPressStart\n  });\n\n  return {\n    groupProps: {\n      ...focusWithinProps,\n      role: 'group',\n      'aria-disabled': isDisabled,\n      'aria-invalid': isInvalid ? 'true' : undefined\n    },\n    labelProps,\n    inputProps,\n    incrementButtonProps,\n    decrementButtonProps,\n    errorMessageProps,\n    descriptionProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}